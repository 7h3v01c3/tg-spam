// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// SpamRestMock is a mock implementation of events.SpamWeb.
//
//	func TestSomethingThatUsesSpamRest(t *testing.T) {
//
//		// make and configure a mocked events.SpamWeb
//		mockedSpamRest := &SpamRestMock{
//			UnbanURLFunc: func(userID int64) string {
//				panic("mock out the UnbanURL method")
//			},
//		}
//
//		// use mockedSpamRest in code that requires events.SpamWeb
//		// and then make assertions.
//
//	}
type SpamRestMock struct {
	// UnbanURLFunc mocks the UnbanURL method.
	UnbanURLFunc func(userID int64) string

	// calls tracks calls to the methods.
	calls struct {
		// UnbanURL holds details about calls to the UnbanURL method.
		UnbanURL []struct {
			// UserID is the userID argument value.
			UserID int64
		}
	}
	lockUnbanURL sync.RWMutex
}

// UnbanURL calls UnbanURLFunc.
func (mock *SpamRestMock) UnbanURL(userID int64) string {
	if mock.UnbanURLFunc == nil {
		panic("SpamRestMock.UnbanURLFunc: method is nil but SpamWeb.UnbanURL was just called")
	}
	callInfo := struct {
		UserID int64
	}{
		UserID: userID,
	}
	mock.lockUnbanURL.Lock()
	mock.calls.UnbanURL = append(mock.calls.UnbanURL, callInfo)
	mock.lockUnbanURL.Unlock()
	return mock.UnbanURLFunc(userID)
}

// UnbanURLCalls gets all the calls that were made to UnbanURL.
// Check the length with:
//
//	len(mockedSpamRest.UnbanURLCalls())
func (mock *SpamRestMock) UnbanURLCalls() []struct {
	UserID int64
} {
	var calls []struct {
		UserID int64
	}
	mock.lockUnbanURL.RLock()
	calls = mock.calls.UnbanURL
	mock.lockUnbanURL.RUnlock()
	return calls
}

// ResetUnbanURLCalls reset all the calls that were made to UnbanURL.
func (mock *SpamRestMock) ResetUnbanURLCalls() {
	mock.lockUnbanURL.Lock()
	mock.calls.UnbanURL = nil
	mock.lockUnbanURL.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *SpamRestMock) ResetCalls() {
	mock.lockUnbanURL.Lock()
	mock.calls.UnbanURL = nil
	mock.lockUnbanURL.Unlock()
}
